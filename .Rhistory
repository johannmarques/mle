.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2))) %>%
lm(ENABruta ~ 0 + seasonal, data = .)
# Agora vamos fazer as primeiras tarefas de modelagem
stock %>%
filter(id_subsistema == 'SE') %>%
mutate(ENABruta = log(ENABruta)) %>%
{{for(l in 1:14){
.[paste0('ar_',l)] <- lag(.['ENABruta'], l)
}
.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2))) %>%
lm(ENABruta ~ 0 + seasonal*vars(starts_with('ar')), data = .)
stock %>%
filter(id_subsistema == 'SE') %>%
mutate(ENABruta = log(ENABruta)) %>%
{{for(l in 1:14){
.[paste0('ar_',l)] <- lag(.['ENABruta'], l)
}
.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2))) %>%
lm(ENABruta ~ 0 + seasonal*(ar_1:ar_14), data = .)
paste('seasonal*ar_',1:14, collapse="+")
paste('seasonal*ar_',1:14, collapse=" +")
paste0('ENABruta ~ 0', paste(' + seasonal*ar_',1:14, collapse=""))
.}} %>%
# Agora vamos fazer as primeiras tarefas de modelagem
stock %>%
filter(id_subsistema == 'SE') %>%
mutate(ENABruta = log(ENABruta)) %>%
{{for(l in 1:14){
.[paste0('ar_',l)] <- lag(.['ENABruta'], l)
}
.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2))) %>%
lm(as.formula(paste0('ENABruta ~ 0', paste(' + seasonal*ar_',1:14, collapse=""))), data = .)
stock %>%
filter(id_subsistema == 'SE') %>%
mutate(ENABruta = log(ENABruta)) %>%
{{for(l in 1:14){
.[paste0('ar_',l)] <- lag(.['ENABruta'], l)
}
.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2))) %>%
lm(as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse=""))), data = .)
.}} %>%
# Agora vamos fazer as primeiras tarefas de modelagem
stock %>%
filter(id_subsistema == 'SE') %>%
mutate(ENABruta = log(ENABruta)) %>%
{{for(l in 1:14){
.[paste0('ar_',l)] <- lag(.['ENABruta'], l)
}
.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2))) %>%
lm(as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse=""))), data = .) %>%
summary()
library(tidymodels)
dataset <- stock %>%
filter(id_subsistema == 'SE') %>%
mutate(ENABruta = log(ENABruta)) %>%
{{for(l in 1:14){
.[paste0('ar_',l)] <- lag(.['ENABruta'], l)
}
.}} %>%
mutate(seasonal = factor(str_sub(year_month, start= -2)))
rec <- recipe(as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse=""))), data = dataset) %>%
step_normalize(all_numeric_predictors())
as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse="")))
rec <- recipe(as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse=""))), data = dataset) %>%
step_normalize(all_numeric_predictors())
rec <- as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse=""))) %>%
recipe(., data = dataset) %>%
step_normalize(all_numeric_predictors())
my_formula <- as.formula(paste0('ENABruta ~ 0', paste0(' + seasonal*ar_',1:14, collapse="")))
rec <- recipe(my_formula, data = dataset) %>%
step_normalize(all_numeric_predictors())
rec <- recipe() %>%
step_normalize(all_numeric_predictors())
rec <- recipe(data = dataset) %>%
step_normalize(all_numeric_predictors())
rec <- recipe(ENABruta ~ 0 + ., data = dataset) %>%
step_normalize(all_numeric_predictors())
workflow() %>%
add_model(decision_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset)
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset)
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
plot(fitted(.))
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
fitted(.)
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict()
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict(newdata = dataset)
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict(new_data = dataset)
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict(new_data = dataset) %>%
plot()
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict(new_data = dataset) %>%
{{plot(.$.pred)}}
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict(new_data = dataset) %>%
{{plot(.$.pred, type = 'l')}}
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = dataset) %>%
predict(new_data = dataset) %>%
{{plot(.$.pred - dataset$ENABruta, type = 'l')}}
set.seed(1981)
splitting = initial_split(dataset, prop = 3/4)
training = training(splitting)
testing = testing(splitting)
rec <- recipe(ENABruta ~ 0 + ., data = dataset) %>%
step_normalize(all_numeric_predictors())
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(.$.pred - testing$ENABruta, type = 'l')}}
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
rec <- recipe(ENABruta ~ 0 + ., data = training) %>%
step_normalize(all_numeric_predictors())
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(linear_reg(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
set.seed(1981)
splitting = initial_time_split(dataset, prop = 3/4)
training = training(splitting)
testing = testing(splitting)
rec <- recipe(ENABruta ~ 0 + ., data = training) %>%
step_normalize(all_numeric_predictors())
workflow() %>%
add_model(linear_reg(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(linear_reg(penalty = 0.1, mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(linear_reg(penalty = 0.001, mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(linear_reg(penalty = 0.01, mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
workflow() %>%
add_model(linear_reg(mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
folds <- vfold_cv(training, v = 5, strata = medv, nbreaks = 5)
my_grid <- tibble(penalty = 10^seq(-2, -1, length.out = 10))
wf <- workflow() %>%
add_model(linear_reg(penalty = 0.01, mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
folds <- vfold_cv(training, v = 5, strata = medv, nbreaks = 5)
my_grid <- tibble(penalty = 10^seq(-2, -1, length.out = 10))
wf <- workflow() %>%
add_model(linear_reg(penalty = 0.01, mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
folds <- vfold_cv(training, v = 5, nbreaks = 5)
my_grid <- tibble(penalty = 10^seq(-2, -1, length.out = 10))
wf <- workflow() %>%
add_model(linear_reg(penalty = 0.01, mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
best_mod <- my_res %>% select_best("rmse")
best_mod
my_grid
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
best_mod <- my_res %>% select_best("rmse")
best_mod
finalize_workflow(wf, best_mod) %>%
fit(data = training)
lines(.$.pred, col = 'red')}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
my_res
autoplot(my_res)
my_grid <- tibble(penalty = 10^seq(-3, -1.5, length.out = 10))
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
best_mod <- my_res %>% select_best("rmse")
best_mod
autoplot(my_res)
best_mod <- my_res %>% select_best("rmse")
best_mod
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
autoplot(my_res)
seq(0.1, 1)
seq(0.1, 1, by = 0.1)
my_grid <- tibble(penalty = 10^seq(-3, -1.5, length.out = 10),
mixture = seq(0.1, 1, by = 0.1))
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
best_mod <- my_res %>% select_best("rmse")
best_mod
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
autoplot(my_res)
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
best_mod
finalize_workflow(wf, tibble(penalty = 0.01, mixture = 1, .config = Preprocessor1_Model08)) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
finalize_workflow(wf, tibble(penalty = 0.01, mixture = 1, .config = 'Preprocessor1_Model08')) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
workflow() %>%
add_model(boost_tree(), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
workflow() %>%
add_model(boost_tree(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
workflow() %>%
add_model(rand_forest(mode = 'regression'), formula = my_formula) %>%
add_recipe(rec) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing)
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
bind_cols(testing)
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
bind_cols(testing) %>%
ggplot(aes(x = seasonal, y = .pred-ENABruta)) + geom_boxplot()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
bind_cols(testing) %>%
ggplot(aes(x = seasonal, y = abs(.pred-ENABruta))) + geom_boxplot()
ggplot(training, aes(x = seasonal, y = ENABruta)) + geom_boxplot()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
bind_cols(testing) %>%
ggplot(aes(x = seasonal, y = abs(.pred-ENABruta))) + geom_boxplot()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
bind_cols(testing) %>%
ggplot(aes(x = seasonal, y = .pred-ENABruta)) + geom_boxplot()
my_grid <- tibble(penalty = 10^seq(-3, -1.5, length.out = 100),
mixture = seq(0.1, 1, by = 0.1))
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
best_mod <- my_res %>% select_best("rmse")
autoplot(best_mod)
autoplot(my_res)
10^seq(-3, -1.5, length.out = 100)
my_res
my_grid <- tibble(penalty = 10^seq(-3, -1.5, length.out = 100),
mixture = seq(0.1, 1, by = 0.1))
my_grid <- tibble(penalty = 10^seq(-3, -1.5, length.out = 100),
mixture = seq(0.1, 1, by = 0.01))
my_grid <- tibble(penalty = 10^seq(-3, -1.5, length.out = 100),
mixture = seq(0.01, 1, by = 0.01))
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
autoplot(my_res)
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
best_mod <- my_res %>% select_best("rmse")
best_mod
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
bind_cols(testing) %>%
ggplot(aes(x = seasonal, y = .pred-ENABruta)) + geom_boxplot()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
#{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
#{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
{{testing$ENABruta - .$.pred}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
#{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
{{abs((testing$ENABruta - .$.pred)/testing$ENABruta)}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
#{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
{{mean(abs((testing$ENABruta - .$.pred)/testing$ENABruta))}}
autoplot(my_res)
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>% summary()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>% tidy()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>% tidy() %>% View()
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
#{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
#{{mean(abs((testing$ENABruta - .$.pred)/testing$ENABruta))}}
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = tune(), Intercept = FALSE) %>%
set_engine("glmnet"), formula = my_formula) %>%
add_recipe(rec)
help(linear_reg)
wf <- workflow() %>%
add_model(linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet", Intercept = FALSE), formula = my_formula) %>%
add_recipe(rec)
my_res <- wf %>%
tune_grid(resamples = folds,
grid = my_grid,
control = control_grid(verbose = FALSE, save_pred = TRUE),
metrics = metric_set(rmse))
best_mod <- my_res %>% select_best("rmse")
best_mod
autoplot(my_res)
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
#{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
#{{mean(abs((testing$ENABruta - .$.pred)/testing$ENABruta))}}
{{plot(testing$ENABruta, type = 'l')
lines(.$.pred, col = 'red')}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>%
predict(new_data = testing) %>%
{{sqrt(mean((testing$ENABruta - .$.pred)^2))}}
finalize_workflow(wf, best_mod) %>%
fit(data = training) %>% tidy() %>% View()
setwd('/media/johan/AEA0EC4FA0EC2017/Users/johan/Documents/Masters/2023_1/Econometrics/Practice/report')
